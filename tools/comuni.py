#!/usr/bin/env python

import csv
from io import TextIOWrapper
import requests
from sys import argv, exit
from typing import List, Dict

COMUNI_CSV_URL = "https://www.istat.it/storage/codici-unita-amministrative/Elenco-comuni-italiani.csv"


class Comune(object):
    def __init__(self, line: Dict[str, str]) -> None:
        self.regione = Comune.__sanitize_region(line["Denominazione Regione"])
        self.provincia = Comune.__sanitize_province(
            line[
                "Denominazione dell'Unità territoriale sovracomunale (valida a fini statistici)"
            ]
        )
        key = f"{line['Denominazione in italiano'].upper()}_{line['Codice Comune formato alfanumerico']}"
        key = Comune.__sanitize_key(key)
        self.key = key
        self.value = line["Denominazione (Italiana e straniera)"]

    @staticmethod
    def __sanitize_region(region: str) -> str:
        if region == "Trentino-Alto Adige/Südtirol":
            region = "Trentino-Alto Adige"
        elif region == "Valle d'Aosta/Vallée d'Aoste":
            region = "Valle d'Aosta"

        return Comune.__sanitize_key(region.upper())

    @staticmethod
    def __sanitize_province(province: str) -> str:
        province = Comune.__sanitize_key(province.upper())
        if province == "BOLZANO/BOZEN":
            province = "BOLZANO"
        elif province == "VALLE_DAOSTA/VALLEE_DAOSTE":
            province = "AOSTA"

        return province

    @staticmethod
    def __sanitize_key(key: str) -> str:
        return (
            key.replace(" ", "_")
            .replace("À", "A")
            .replace("È", "E")
            .replace("É", "E")
            .replace("Ì", "I")
            .replace("Ò", "O")
            .replace("Ù", "U")
            .replace(" ", "_")
            .replace("'", "")
            .replace("-", "_")
            .replace("(", "")
            .replace(")", "")
            .replace(".", "")
            .replace("Ë", "E")
            .replace("Ï", "I")
            .replace("Ö", "O")
            .replace("Ü", "U")
            .replace("Ç", "C")
            .replace("Ñ", "N")
            .replace("Š", "S")
            .replace("Ž", "Z")
        )


def download_comuni_csv() -> str:
    r = requests.get(COMUNI_CSV_URL)
    r.raise_for_status()
    content = r.content.decode("iso-8859-1")

    return content


def decode_csv(content: str) -> List[Dict[str, str]]:
    reader = csv.DictReader(content.splitlines(), delimiter=";")
    return list(map(lambda x: Comune(x), reader))


def write_imports(writer: TextIOWrapper):
    writer.write("import Province from './province';\n")
    writer.write("import Region from './region';\n")
    writer.write("\n")


def write_cities_enum(writer: TextIOWrapper, comuni: List[Comune]):
    writer.write("/**\n")
    writer.write(" * List of all the cities in Italy\n")
    writer.write(" */\n")
    writer.write("enum City {\n")
    for item in comuni:
        writer.write(f"  {item.key},\n")

    writer.write("}\n")
    writer.write("\n")
    writer.write("export default City;\n")


def write_attributes(writer: TextIOWrapper, comuni: List[Comune]):
    writer.write("/**\n")
    writer.write(" * Attributes associated to each City\n")
    writer.write(" */\n")
    writer.write("export const CITIES_ATTRIBUTES = {\n")

    for item in comuni:
        writer.write(f"  [City.{item.key}]: {{\n")
        writer.write(f"    region: Region.{item.regione},\n")
        writer.write(f"    province: Province.{item.provincia},\n")
        writer.write(f'    name: "{item.value}",\n')
        writer.write("  },\n")

    writer.write("};\n")


def write_comuni_ts(output_file: str, comuni: List[Comune]):
    with open(output_file, mode="w", encoding="utf8") as f:
        f.write("/* eslint-disable */\n")
        f.write("/* tslint:disable */\n")
        f.write("// This file is autogenerated by tools/comuni.py\n")
        f.write("\n")

        write_imports(f)
        write_cities_enum(f, comuni)
        write_attributes(f, comuni)

        f.close()


if __name__ == "__main__":
    if len(argv) != 2:
        print("Usage: python comuni.py <output_file>")
        exit(1)

    content = download_comuni_csv()
    comuni = decode_csv(content)
    write_comuni_ts(argv[1], comuni)
